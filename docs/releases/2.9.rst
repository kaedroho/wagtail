==========================================
Wagtail 2.9 release notes - IN DEVELOPMENT
==========================================

.. contents::
    :local:
    :depth: 1


What's new
==========

Report data exports
~~~~~~~~~~~~~~~~~~~

Data from reports, form submissions and ModelAdmin can now be exported to both XLSX and CSV format. For ModelAdmin, this is enabled by specifying a ``list_export`` attribute on the ModelAdmin class. This feature was developed by Jacob Topp-Mugglestone and sponsored by `The Motley Fool <https://www.fool.com/>`_.


Other features
~~~~~~~~~~~~~~

 * Skip page validation when unpublishing a page (Samir Shah)
 * Added :ref:`streamfield_multiplechoiceblock` block type for StreamField (James O'Toole)
 * ChoiceBlock now accepts a ``widget`` keyword argument (James O'Toole)
 * Reduced contrast of rich text toolbar (Jack Paine)
 * Support the rel attribute on custom ModelAdmin buttons (Andy Chosak)
 * Server-side page slug generation now respects ``WAGTAIL_ALLOW_UNICODE_SLUGS`` (Arkadiusz Michał Ryś)
 * Wagtail admin no longer depends on SiteMiddleware, avoiding incompatibility with Django sites framework and redundant database queries (aritas1, timmysmalls, Matt Westcott)
 * Tag field autocompletion now handles custom tag models (Matt Westcott)
 * ``wagtail_serve`` URL route can now be omitted for headless sites (Storm Heg)
 * Allow free tagging to be disabled on custom tag models (Matt Westcott)
 * Allow disabling page preview by setting ``preview_modes`` to an empty list (Casper Timmers)
 * Add Vidyard to oEmbed provider list (Steve Lyall)


Bug fixes
~~~~~~~~~

 * Added ARIA alert role to live search forms in the admin (Casper Timmers)
 * Reordered login form elements to match expected tab order (Kjartan Sverrisson)
 * Re-added 'Close Explorer' button on mobile viewports (Sævar Öfjörð Magnússon)
 * Added a more descriptive label to Password reset link for screen reader users (Casper Timmers, Martin Coote)
 * Improved Wagtail logo contrast by adding a background (Brian Edelman, Simon Evans, Ben Enright)
 * Prevent duplicate notification messages on page locking (Jacob Topp-Mugglestone)
 * Rendering of non field errors for InlinePanel items (Storm Heg)
 * ``{% image ... as var %}`` now clears the context variable when passed None as an image (Maylon Pedroso)
 * ``refresh_index`` method on Elasticsearch no longer fails (Lars van de Kerkhof)
 * Document tags no longer fail to update when replacing the document file at the same time (Matt Westcott)


Upgrade considerations
======================

Removed support for Django 2.1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Django 2.1 is no longer supported as of this release; please upgrade to Django 2.2 or above before upgrading Wagtail.


``SiteMiddleware`` and ``request.site`` deprecated
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Wagtail's :class:`~wagtail.core.middleware.SiteMiddleware`, which makes the current site object available as the property ``request.site``, is now deprecated as it clashes with Django's sites framework and makes unnecessary database queries on non-Wagtail views. References to ``request.site`` in your code should be removed; the recommended way of retrieving the current site is ``Site.find_for_request(request)`` in Python code, and the ``{% wagtail_site %}`` tag within Django templates. Once these are removed, ``'wagtail.core.middleware.SiteMiddleware'`` can be removed from your project's ``MIDDLEWARE`` setting.


Move to new configurable moderation system (workflow)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A new workflow system has been introduced for moderation. Task types are defined as models in code, and instances - tasks - are created in the Wagtail Admin,
then chained together to form workflows: sequences of moderation stages through which a page must pass prior to publication.

Key points:

* Prior to 2.9, moderation in Wagtail was performed on a per-revision basis: once submitted, the moderator would approve or reject
  the submitted revision only, which would not include subsequent changes. Moderation is now performed per page, with moderators
  always seeing the latest revision.
* ``PageRevision.submitted_for_moderation`` will return ``True`` for revisions passing through the old moderation system, but not for the new system
* Pages undergoing moderation in the old system will not have their moderation halted, and can still be approved/rejected. As a result, you may see
  two sets of moderation dashboard panels until there are no longer any pages in moderation in the old system
* No pages can be submitted for moderation in the old system: "Submit for moderation" now submits to the new Workflow system
* You no longer need the publish permission to perform moderation actions on a page - actions available to each user are now configured per task. 
  With the built in ``GroupApprovalTask``, anybody in a specific set of groups can approve or reject the task.
* A data migration is provided to recreate your existing publish-permission based moderation workflow in the new system. If you have made no permissions changes,
  this should simply create a task approvable by anybody in the `Moderators` group, and assign a workflow with this task to the root page, creating a standard workflow
  for the entire page tree. However, if you have a complex nested set of publish page permissions, the created set of workflows will be more complex as well - you may wish to
  inspect the created workflows and tasks in the new ``Settings/Workflows`` admin area and potentially simplify them.
  See :ref:`managing_workflows` for the administrator guide.
